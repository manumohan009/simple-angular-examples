Lazy loading
  ng generate module admin --flat --routing
    Remove admin related components from appModule and add into the admin module declaration array
    Remove all routes which is part of admin and add to admin routing array
    Make the first route in admin route main and others their children
    In the main app route file add the admin route
      { path: 'admin', loadChildren: './admin/admin.module#AdminModule'}
    add <router-outlet></router-outlet> in admin.component.html
  ng generate module user --flat --routing
    Remove admin related components from appModule and add into the admin module declaration array

10 Tips to Optimize the Performance of an Angular Application
  #1 Angular Command Line Interface (CLI)
    Angular CLI is a tool that uses bundling and limited tree-shaking to reduce the fragmentation of Angular code to zero. It offers various options while generating the build for the production environment.
    A regular update of Angular CLI allows access to the advanced methods of fixing bugs and update of security features.
  #2 Tree-shaking
    Tree-shaking supports the creation of smaller build size by eliminating unused codes. It is enabled by default in case you are using Angular CLI.
  #3 JIT (Just-in-Time) Compilation
    JIT supports the compilation of one file at a time using a different set of libraries.
    The compilation of applications in JIT takes place within the browser and during the runtime.
  #4 AOT (Ahead-of-Time) Compilation
    AOT is one more way of compiling applications, but it is different than JIT. In AOT, the compiler runs once at the build time using any set of libraries.
    This process to compile applications was introduced in Angular 4.X but was enforced after Angular 5.X. In Angular 5.X and Angular 6.X, AOT compilation is automatic and there is no need for the use of —aot flag.
  #5 Prod Flag
    meta flag --prod automatically calls --aot in case of Angular 5.X and 6.X. Here, it is to be noted that Angular 2 and Angular 4 uses a meta flag --prod to make small-size builds.
    However, we can also use --aot meta flag to reduce the build size.
  #6 UglifyJS and Build Optimizer Flag
    The meta flag --prod uses UglifyJS (a JavaScript compressor) for limited dead code elimination.
    UglifyJS is the process where smaller build size is created using code transformations. It removes white spaces, comments, and more to optimize Angular.
  #7 Build Optimizer and Vendor-Chunk
    The two meta flags --build-optimizer and --vendor-chunk optimize the Angular build. When using Angular CLI, you have to make sure that the “Build Optimizer” flag is specified as it will disable the vendor chunk and will reduce the size of the application.
    It is to be noted that the meta flag -vendor-chunk is set to false by default, but it can be changed by using --vendor-chunk=true.
  #8 Package.json\
  #9 Third-Party Tools
  #10 .htaccess file


